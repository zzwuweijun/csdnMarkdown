## jsp入门

问题：

-   在学习了Servlet之后，使用Servlet进行页面的展现，代码书写过于麻烦。极大的影响了开发效率，那么有没有一种方式可以让我们像写网页一样来进行网页的编程工作呢？

---

解决：

-   使用jsp技术

---

概念：

-   JSp全名为java server pages，中文名教java服务器页面，其根本是一个简化的Servlet设计，是一种动态网页技术标准。

---

特点：

-   本质上是Servlet
-   跨平台，一次编译处处运行
-   组件跨平台
-   健壮性和安全性

---

---

### JSP的语法与指令：

#### JSP的page指令

-   page指令的使用方法：

    -   ```jsp
        <%@page 属性名="属性值" 属性名="属性值" ...%>
        实例：
        <%@ page language="java" contentType="text/html; charset=UTF-8"	pageEncoding="UTF-8"%>
        ```

    -   其不同部分之间用 空格 隔开。

    -   该指令能使用多次。

-   作用：

    -   `language`：声明惊悚片要被转译的语言。
    -   `import`：要导入的java包。不同包用逗号隔开。
    -   `pageEncoding`：设置jsp文件的数据编码格式。
    -   `ContentType`：设置jsp数据响应给浏览器，浏览器的解析和编码格式。
    -   `session`:设置转译的Servlet中是够开启Session支持，默认开启，true表示开启。
    -   `errorPage`：设置jsp运行错误跳转的页面。
    -   `extends`：设置jsp转译的java文件要继承的父类。
    -   作用：
        -   配置jsp文件的转译相关的参数。 

#### JSP的taglib指令

#### JSP的局部代码块

-   要在jsp文件中使用java代码，首先要声明java代码域。

-   ```jsp
    <%
    	... java代码书写处...
    %>
    ```

-   特点：

    -   局部代码快中声明的java代码会被原样转译到jsp对应的Servlet文件的_JspServlet方法中。

    -   一个java代码域中可以只写完整java代码的一部分，剩下的在其他的java代码域中书写完整即可。

    -   如果完整的代码由两块java代码域组成，且在两块代码域中存在html代码，则只有在java代码判断为真时才会返回html代码给浏览器。

        -   ```jsp
            <%
            if(true){
            %>
            <b>判断为真才显示</b>
            <% } %>
            ```

            

-   缺点：

    -   使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难。

#### JSP的全局代码块

-   作用：

    -   声明方法和变量；和局部代码块差不多，只加了`!`符号。  

    -   ```jsp
        <%!
            ...java代码书写处...
        %>
        ```

-   特点：

    -   声明的java代码作为全局代码转译到对应的Servlet类中。

-   注意：

    -   全局代码块声明的代码，需要使用局部代码块调用。

-   局部代码块和全局代码块的区别：

    -   我们知道jsp文件会转译成java文件，后再编译成class文件。而且jsp文件中的大多数代码都会被转译到对应的java文件中的service方法中的代码，所以可以知道局部代码块转译后的代码都会被放到service中，而全局代码块转译后的代码会被放到java文件中，既是类中的自定义方法和属性。

#### JSP的注释

-   jsp有三中注释

    -   前端语言注释

        -   会被转译，也会被发送，但是不会被浏览器执行

        -   前端怎么写就怎么写

        -   ```html
            <!--
            ...
            -->
            ```

            

    -   java语言注释

        -   会被转译，但是不会被Servlet执行

        -   java怎么写就怎么写

        -   ```jsp
            //
            或
            /* ...*/
            ```

            

    -   jsp注释

        -   不会被转译

        -   ```jsp
            <%--
                ...
            --%>
            ```

#### JSP的脚本段语句

-   特点：

    -   帮组我们快速的获取变量或方法的返回值作为数据响应给浏览器。

-   使用：

    -   ```jsp
        <%=变量名或方法%>
        ```

    -   注意：不要在变量名或方法后使用分号。

-   位置：

    -   处理jsp语法要求以外的任意位置。

#### JSP的静态引入（JSP的include指令）

-   使用：

    ```jsp
    <%@include file="要引入的jsp文件的相对路径" %>>
    ```

-   特点：

    -   会将引入的jsp文件和当前的jsp文件转译成一个java文件使用。在网页中也就显示了合并后的显示效果。

-   注意：

    -   静态引入的jsp文件不会单独转译成java（Servlet）文件

    -   当前文件和静态引入的jsp文件中不能够使用java代码块声明同名变量。

        

#### JSP的动态引入

-   ```jsp
    <jsp:include page="要引入的jsp文件的相对路径" flush="false"></jsp:include>
    ```

-   特点：

    -   会将引入的jsp文件单独转译，在当前文件转译好的java文件中调用引入的jsp文件的转译文件。
    -   在网页中下士合并后的显示结果。

-   注意：

    -   动态引入允许文件中声明同名变量。

-   优点：

    -   降低代码的冗余，便于维护升级。



#### 页面转发（forword标签）

-   ```jsp
    <jsp:forward page="要转发的jsp的相对路径"></jsp:forward>
    ```

-   特点：

    -   一次请求
    -   地址栏信息不改变。和Servlet的转发一样。

-   注意：

    -   在转发标签的两个标签中间处理写`<jsp:param value="" name=""/>`子标签不报错，其他的都报错。
    -   会将数据以 ？ 的形式拼接在转发路径的后面。



---

---

### JSP内置对象：

-   内置对象：jsp文件在转译成其对应的Servlet文件的时候自动生成的并声明的对象，直接使用即可。
-   注意：内置对象在jsp页面中使用，要在局部代码块或脚本段中使用，不能在全局代码块中使用。![1575637469755](jsp%E5%85%A5%E9%97%A8md.assets/1575637469755.png)![1575637844860](jsp%E5%85%A5%E9%97%A8md.assets/1575637844860.png)

-   常用对象：Request、response、application、Session

#### PageContext对象

-   页面上下文对象，封存了其他内置对象。封存了当前jsp的运行信息。
-   作用域：当前页面，除非有流转到其他页面。
-   注意：每个jsp文件单独拥有一个pageContext对象。

#### Request对象

-   封存当前请求数据的对象。由Tomcat服务器创建。

#### Respone对象

-   响应对象，用来响应数据到浏览器。
-   一般用来设置响应头、重定向等。

#### Session对象

-   该对象用来存储用户的不同请求的共享数据。
-   一次回话

#### Applicatio对象

-   也就是ServletContext对象，一个项目只用一个。存储用户共享数据的对象，以及完成其他操作。

#### Out对象

-   响应对象，jsp内部使用。带有缓冲区的对象，效率高于response对象。

#### Page对象

-   代表当前jsp的对象。相当域java中的this。

#### Exception对象

-   异常对象。存储了当前运行的异常信息。
-   使用该对象需要在page指令中使用属性`isErrorPage="true"`

#### config对象

-   也就是ServletConfig对象。主要用来获取web.xml文件中的配置信息数据，完成一些初始化数据的读取。

---

---